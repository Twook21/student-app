// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum RelationshipType {
  FATHER
  MOTHER
  GUARDIAN
  STEP_PARENT
  GRANDPARENT
  OTHER
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

// Core User Management
model User {
  id          String    @id @default(cuid())
  email       String    @unique
  username    String    @unique
  passwordHash String   @map("password_hash")
  firstName   String    @map("first_name")
  lastName    String    @map("last_name")
  phone       String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  isActive    Boolean   @default(true) @map("is_active")
  lastLogin   DateTime? @map("last_login")

  // Relations
  student         Student?
  teacher         Teacher?
  parent          Parent?
  userRoles       UserRole[]
  createdPointTypes PointType[] @relation("PointTypeCreator")
  approvedPoints  PointRecord[] @relation("PointApprover")
  assignedRoles   UserRole[]    @relation("RoleAssigner")

  @@map("users")
}

model Student {
  id             String    @id @default(cuid())
  userId         String    @unique @map("user_id")
  studentNumber  String    @unique @map("student_number")
  dateOfBirth    DateTime  @map("date_of_birth") @db.Date
  gradeLevel     Int       @map("grade_level")
  classId        String?   @map("class_id")
  majorStream    String?   @map("major_stream")
  enrollmentDate DateTime  @map("enrollment_date") @db.Date
  graduationDate DateTime? @map("graduation_date") @db.Date

  // Relations
  user                User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  class               Class?                     @relation(fields: [classId], references: [id])
  parentRelationships ParentStudentRelationship[]
  pointRecords        PointRecord[]
  pointSummaries      PointSummary[]

  @@map("students")
}

model Teacher {
  id                  String  @id @default(cuid())
  userId              String  @unique @map("user_id")
  employeeId          String  @unique @map("employee_id")
  hireDate            DateTime @map("hire_date") @db.Date
  department          String
  isHeadOfDepartment  Boolean @default(false) @map("is_head_of_department")
  specialty           String?

  // Relations
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  homeroomClasses Class[]         @relation("HomeroomTeacher")
  teacherClasses  TeacherClass[]
  teacherSubjects TeacherSubject[]
  pointRecords    PointRecord[]

  @@map("teachers")
}

model Parent {
  id               String  @id @default(cuid())
  userId           String  @unique @map("user_id")
  occupation       String?
  emergencyContact Boolean @default(false) @map("emergency_contact")

  // Relations
  user                User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  studentRelationships ParentStudentRelationship[]

  @@map("parents")
}

model ParentStudentRelationship {
  id               String           @id @default(cuid())
  parentId         String           @map("parent_id")
  studentId        String           @map("student_id")
  relationshipType RelationshipType @map("relationship_type")
  isPrimaryContact Boolean          @default(false) @map("is_primary_contact")
  createdAt        DateTime         @default(now()) @map("created_at")

  // Relations
  parent  Parent  @relation(fields: [parentId], references: [id], onDelete: Cascade)
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([parentId, studentId])
  @@map("parent_student_relationships")
}

// Academic Structure
model Class {
  id                String    @id @default(cuid())
  className         String    @map("class_name")
  classCode         String    @unique @map("class_code")
  gradeLevel        Int       @map("grade_level")
  academicYear      String    @map("academic_year")
  homeroomTeacherId String?   @map("homeroom_teacher_id")
  maxStudents       Int       @default(30) @map("max_students")
  createdAt         DateTime  @default(now()) @map("created_at")

  // Relations
  homeroomTeacher Teacher?       @relation("HomeroomTeacher", fields: [homeroomTeacherId], references: [id])
  students        Student[]
  teacherClasses  TeacherClass[]

  @@map("classes")
}

model Subject {
  id          String  @id @default(cuid())
  subjectName String  @map("subject_name")
  subjectCode String  @unique @map("subject_code")
  department  String
  credits     Int     @default(1)
  description String?
  isActive    Boolean @default(true) @map("is_active")

  // Relations
  teacherSubjects TeacherSubject[]

  @@map("subjects")
}

model TeacherClass {
  id               String   @id @default(cuid())
  teacherId        String   @map("teacher_id")
  classId          String   @map("class_id")
  academicYear     String   @map("academic_year")
  isHomeroomTeacher Boolean @default(false) @map("is_homeroom_teacher")
  assignedDate     DateTime @map("assigned_date") @db.Date

  // Relations
  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  class   Class   @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@unique([teacherId, classId, academicYear])
  @@map("teacher_classes")
}

model TeacherSubject {
  id              String   @id @default(cuid())
  teacherId       String   @map("teacher_id")
  subjectId       String   @map("subject_id")
  academicYear    String   @map("academic_year")
  isPrimaryTeacher Boolean @default(false) @map("is_primary_teacher")
  assignedDate    DateTime @map("assigned_date") @db.Date

  // Relations
  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([teacherId, subjectId, academicYear])
  @@map("teacher_subjects")
}

// Points System
model PointCategory {
  id           String  @id @default(cuid())
  categoryName String  @map("category_name")
  description  String?
  isPositive   Boolean @map("is_positive")
  colorCode    String  @default("#000000") @map("color_code")
  isActive     Boolean @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  pointTypes PointType[]

  @@map("point_categories")
}

model PointType {
  id              String  @id @default(cuid())
  pointCategoryId String  @map("point_category_id")
  typeName        String  @map("type_name")
  description     String?
  defaultPoints   Int     @map("default_points")
  isActive        Boolean @default(true) @map("is_active")
  createdBy       String  @map("created_by")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  pointCategory PointCategory @relation(fields: [pointCategoryId], references: [id])
  creator       User          @relation("PointTypeCreator", fields: [createdBy], references: [id])
  pointRecords  PointRecord[]

  @@map("point_types")
}

model PointRecord {
  id             String         @id @default(cuid())
  studentId      String         @map("student_id")
  pointTypeId    String         @map("point_type_id")
  teacherId      String         @map("teacher_id")
  pointsAwarded  Int            @map("points_awarded")
  incidentDate   DateTime       @map("incident_date") @db.Date
  incidentTime   DateTime?      @map("incident_time") @db.Time
  location       String?
  description    String?
  academicYear   String         @map("academic_year")
  semester       Int            @default(1)
  approvalStatus ApprovalStatus @default(PENDING) @map("approval_status")
  approvedBy     String?        @map("approved_by")
  approvedAt     DateTime?      @map("approved_at")
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")

  // Relations
  student    Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  pointType  PointType  @relation(fields: [pointTypeId], references: [id])
  teacher    Teacher    @relation(fields: [teacherId], references: [id])
  approver   User?      @relation("PointApprover", fields: [approvedBy], references: [id])

  @@map("point_records")
}

// RBAC System
model Role {
  id           String  @id @default(cuid())
  roleName     String  @unique @map("role_name")
  description  String?
  isSystemRole Boolean @default(false) @map("is_system_role")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  rolePermissions RolePermission[]
  userRoles       UserRole[]

  @@map("roles")
}

model Permission {
  id             String  @id @default(cuid())
  permissionName String  @unique @map("permission_name")
  resource       String
  action         String
  description    String?
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  rolePermissions RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id           String   @id @default(cuid())
  roleId       String   @map("role_id")
  permissionId String   @map("permission_id")
  grantedAt    DateTime @default(now()) @map("granted_at")

  // Relations
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model UserRole {
  id         String    @id @default(cuid())
  userId     String    @map("user_id")
  roleId     String    @map("role_id")
  assignedBy String?   @map("assigned_by")
  assignedAt DateTime  @default(now()) @map("assigned_at")
  expiresAt  DateTime? @map("expires_at")
  isActive   Boolean   @default(true) @map("is_active")

  // Relations
  user     User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  role     Role  @relation(fields: [roleId], references: [id], onDelete: Cascade)
  assigner User? @relation("RoleAssigner", fields: [assignedBy], references: [id])

  @@unique([userId, roleId])
  @@map("user_roles")
}

// Supporting Tables
model AcademicYear {
  id        String   @id @default(cuid())
  yearName  String   @unique @map("year_name")
  startDate DateTime @map("start_date") @db.Date
  endDate   DateTime @map("end_date") @db.Date
  isCurrent Boolean  @default(false) @map("is_current")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("academic_years")
}

model PointSummary {
  id                   String   @id @default(cuid())
  studentId            String   @map("student_id")
  academicYear         String   @map("academic_year")
  semester             Int
  totalPositivePoints  Int      @default(0) @map("total_positive_points")
  totalNegativePoints  Int      @default(0) @map("total_negative_points")
  netPoints            Int      @default(0) @map("net_points")
  lastUpdated          DateTime @default(now()) @map("last_updated")

  // Relations
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, academicYear, semester])
  @@map("point_summaries")
}