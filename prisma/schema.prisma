generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPERADMIN
  BK
  WALIKELAS
  GURUMAPEL
  SISWA
  ORANGTUA
}

enum StatusApproval {
  MENUNGGU
  DISETUJUI
  DITOLAK
}

enum TipeKategori {
  PELANGGARAN
  PRESTASI
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role
  phone     String?
  address   String?  @db.Text
  avatar    String?  
  mapel     String?  
  resetToken String?  
  resetTokenExpiry DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  siswaUser          Siswa?        @relation("SiswaUser")
  siswaAsOrangTua    Siswa[]       @relation("OrangTua")
  siswaAsWaliKelas   Siswa[]       @relation("WaliKelas")
  pelanggaranInput   Pelanggaran[] @relation("GuruInput")
  pelanggaranApproveWaliKelas Pelanggaran[] @relation("WaliKelasApproval")
  prestasiInput      Prestasi[]    @relation("GuruInput")
  notifikasiPenerima Notifikasi[]  @relation("Penerima")

  @@map("users")
}

enum Gender {
  L 
  P 
}

model Siswa {
  id           String   @id @default(uuid())
  nama         String
  nis          String   @unique
  kelas        String
  gender       Gender
  totalPoin    Int      @default(0)
  orangTuaId   String?
  waliKelasId  String?
  userId       String?  @unique 
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User?         @relation("SiswaUser", fields: [userId], references: [id])
  orangTua     User?         @relation("OrangTua", fields: [orangTuaId], references: [id])
  waliKelas    User?         @relation("WaliKelas", fields: [waliKelasId], references: [id])
  pelanggaran  Pelanggaran[]
  prestasi     Prestasi[]

  @@map("siswa")
}

model Kategori {
  id          String        @id @default(uuid())
  nama        String
  tipe        TipeKategori
  poinDefault Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  pelanggaran Pelanggaran[]
  prestasi    Prestasi[]

  @@map("kategori")
}

model Pelanggaran {
  id          String         @id @default(uuid())
  siswaId     String
  guruId      String
  kategoriId  String
  deskripsi   String         @db.Text
  poin        Int
  status      StatusApproval @default(MENUNGGU)
  alasanSiswa String?        @db.Text
  catatanBK   String?        @db.Text
  fotoUrl     String?        
  approvedByWaliKelasId String?
  approvedByWaliKelasAt DateTime?
  needsWaliKelasApproval Boolean @default(false)
  tanggal     DateTime       @default(now())
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  
  siswa    Siswa    @relation(fields: [siswaId], references: [id], onDelete: Cascade)
  guru     User     @relation("GuruInput", fields: [guruId], references: [id])
  waliKelasApprover User? @relation("WaliKelasApproval", fields: [approvedByWaliKelasId], references: [id])
  kategori Kategori @relation(fields: [kategoriId], references: [id])

  @@map("pelanggaran")
}

model Prestasi {
  id         String         @id @default(uuid())
  siswaId    String
  guruId     String
  kategoriId String
  deskripsi  String         @db.Text
  poin       Int
  status     StatusApproval @default(MENUNGGU)
  catatanBK  String?        @db.Text
  fotoUrl    String?        
  tanggal    DateTime       @default(now())
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  siswa    Siswa    @relation(fields: [siswaId], references: [id], onDelete: Cascade)
  guru     User     @relation("GuruInput", fields: [guruId], references: [id])
  kategori Kategori @relation(fields: [kategoriId], references: [id])

  @@map("prestasi")
}

model Notifikasi {
  id        String   @id @default(uuid())
  userId    String
  title     String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation("Penerima", fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifikasi")
}

model AuditLog {
  id          String   @id @default(uuid())
  userId      String
  action      String   
  entity      String   
  entityId    String
  description String   @db.Text
  metadata    String?  @db.Text 
  createdAt   DateTime @default(now())

  @@map("audit_logs")
}